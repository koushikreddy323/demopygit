Python was created by GUIDO VAN ROSSUM in 1991

Printing the type:
x=5
>>> print(type(x))
    <class 'int'>

Converting the type:
>>> x=1
    a=float(1)
    print (type(a))
   <class 'float'>
>>> import random
    print (random.randrange(1,10))
    6
Multiple strings:
a= """koushik,hp,pc"""
   print (a)
   koushik,hp,pc
   print (a[1]) //To print the specific word
   print (a[0:6]) || koushi //To print the characters from the range
   print(len(a))  || 13 //To print the length of the string
   print(f.upper()) || KOUSHIK REDDY //To change into upper case
   print (a.replace("k", "i")) || ioushii Reddy //Replacing characters
   
   txt="Rain"
   x="in" in txt
   print(x)
   True
 
   age =21
   txt="Iam koushik,my age is {}"
   print (txt.format(age))
>>>Iam koushik,my age is 21


   a=10
   b="apples"
   c=250
   myorder= ("I want {} pieces of {} for {} dollars")
   print (myorder.format(a,b,c))
>>>I want 10 pieces of apples for 250 dollars

   txt=("we are called \'the kings\' in south") //To include in " "
   print (txt)
>>>we are called 'the kings' in south
    
   print(isinstance(x,int)) >>>False

   thislist = ["apple","orange","banana"]  // to replace one of the list items
   thislist[1]="curry"
   print (thislist)
>>>['apple', 'curry', 'banana'] 
  
    thislist.append("grapes") // To add at the end of array {append}
    print(thislist)
>>>['apple', 'orange', 'banana', 'grapes']
   thislist.insert(1,"carrot") // To add at some index
   print(thislist)
>>>['apple', 'carrot', 'orange', 'banana', 'grapes']

   del thislist[3]   // to del at certain node || To del a char then use thislist.remove("banana") to clear thislist.clear()
   print (thislist)
>>>['apple', 'carrot', 'orange','grapes'] // to combine to list-> list1+list2

   thislist.extend(list)
   print (thislist)
>>>['apple', 'carrot', 'orange', 'banana', 1, 2]


append()	Adds an element at the end of the list
clear()   	Removes all the elements from the list
copy()	        Returns a copy of the list
count()	        Returns the number of elements with the specified value
extend()	Add the elements of a list (or any iterable), to the end of the current list
index()	        Returns the index of the first element with the specified value
insert()	Adds an element at the specified position
pop()	        Removes the element at the specified position
remove()	Removes the item with the specified value
reverse()	Reverses the order of the list
sort()	        Sorts the list

 car =	{
    "brand": "Ford",
    "model": "Mustang",
    "year": 1964
    }
   print(car.get("model"))
>>>alto

  vehicle={
	"car":{
		"model":"alto",
		"year":2010
		},
	"bike":{
		"model":"passion pro",
		"year":2006
		},
	"bike2":{
		"model":"passion plus",
		"year":2015
		}
	}
  print (vehicle.get("bike"))
>>{'model': 'passion pro', 'year': 2006}

IF.....ELSE
    if a>100:
       print("above 99,")
       if (a>200):
         print("and above 199")
       else :
         print("but not above 201")

>>>above 99,
>>>but not above 201

 i=1
 while i<10:
      print(i)
      i +=1
>>>
1
2
3
4
5
6
7
8
9

fruits=["arange","apple"]  // To print in an order-
for x in fruits:
   print(x)

lap=["hp","dell","lenova"]
 for x in lap: // Break statement( to print upto last element print statement should come first--[print at last viceversa]
     print(x)
     if x=="dell":
      break

>>hp
>>dell

for x in vehicle:
      for y in lap:
        print(x,y)

->CALLING A FUNCTION
   def myfunction(fname):
     print(fname+"Reddy")
  myfunction("koushik")
>>koushik Reddy

def myfunc(*kids):     // When the number of args are unknown use  *xxxxx
	print("youngest kid is"+ kids[2])
       myfunc("koushik","reddy","323")
>>youngest kid is 323

-->def myfunc(child1,child2,child3):
	print("the youngest child is "+child2)
   myfunc(child1="koushik",child2="reddy",child3="323")
>>the youngest child is reddy

--->def myfunc(**kids):
	print("last name of kid is "+ kids["lname"])
    myfunc(fname="koushik",lname="reddy")
>>>last name of kid is reddy

--->def my_func(food):
	for x in food:
		print(x)
fruits=["apple","orange","banana"]
  my_func(fruits)
>>>apple
   orange
   banana

-->RECURSION:
 def rec(k):
	if k>0:
		result=k+rec(k-1)
		print(result)
	else:
		return 0
	return result
        rec(5)
>>>1
3
6
10
15
15

--->class person:
	def __init__(self,fname,lname):
		self.firstname=fname
		self.lastname=lname
	def printname(self):
		print(self.firstname,self.lastname)

 x=person("koushik","reddy")
 x.printname()
>>>koushik reddy


                                                           CODES


x=int(input('Enter first number'))
y=int(input('enter second number'))
b=int(y)
z=x+y
print(z)



result=eval(input('enter a number for eval'))
print(result)
*****************AREA OF A TRIANGLE*************
a=5
b=6
c=7
s=(a+b+c)/2
area=(s*(s-a)*(s-b)*(s-c))**0.5
print('the area of the triangle is%0.2f'%area)
**********************WHILE INCREMENTS**********
i=0
while i<5:
    print('Koushik ',end="")
    j=0
    while j<4:
        print('Reddy ',end="")
        j+=1
    i+=1
    print()
****************TO print numbers from 1 to 100 which are not divisible by 3 and 5******
i=1
while i<=100:
   if i%3!=0 and i%5!=0:
    print (i)
    i+=1

************To print numbers from 1 to 500 which are perfect square**************
i=1
while i<=500:
    j=i**i
    print(j)
    i+=1
***************break statement****************
avl=5
x=int(input('Enter the no of candies u want'))
i=1
while i<=x:
    if i>avl:
        print('out of stock')
        break
    print('candies')
    i+=1
****************continue statement**********
for x in range(1,101):
    if x%3==0:
        continue
    print(x)
******************Pass statement************
for x in range(1,101):
    if x%2!=0:
        pass
    else:
        print(x)
***************PATTERN SUMS*****************
for x in range(4):             ####
    for j in range(4):         ####
        print('# ',end="")     ####
    print()                    ####
*********************************************
for x in range(4):              ####
    for j in range(4-x):        ###
        print('# ',end="")      ##
    print()                     #
*************************************************
for i in range(1,5):          1234
    for j in range(i,5):      234
        print(j ,end="")      34
    print()                   4
*****************FOR WHILE LOOP*****************
nums=[12,52,30,16,21]
for x in nums:
    if x%5==0:
        print(x)
        break
else:
        print('not found')
********************TO FIND A PRIME NUMBER*********
num=int(input('Enter a number'))
for x in range(2,num):
    if num%x==0:
        print('not prime')
        break
else:
    print('Prime')
************ARRAYS IN PYTHON*************************
from array import *
val=array('i',[5,25,95,1])
val.reverse()
for x in range(4):
        print(val[x])
*****************************
from array import *
val=array('u',['k','o','u','s','h','i','k',])
for x in val:
         print(x)
******** TO COPY AN ARRAY TO OTHER (DUPLICATE) *******
from array import *
val=array('u',['k','o','u','s','h','i','k',])
newArr=array(val.typecode,(a for a in val))
for x in newArr:
         print(x)
***************TO PRINT IN ASCENDING ORDER************
from array import *
val=array('i',[1,10,58,32,12,98,1205,0])
for i in range(0,len(val)):
    for j in range(i+1,len(val)):
        if val[i]>val[j]:
            temp=val[j];
            val[j]=val[i];
            val[i]=temp;
print(val)

**************ARRAY INPUT FROM USER*******************
from array import *
arr=array('i',[])
n= int(input('Enter the number of values'))
for i in range(n):
    x= int(input('enter the next values'))
    arr.append(x)
print(arr)

************* TO SEARCH AND PRINT THE INDEX VALUE******
from array import *
arr=array('i',[])
n= int(input('Enter the number of values'))
for i in range(n):
    x= int(input('enter the next values'))
    arr.append(x)
print(arr)

val=int(input('Enter the number of search'))
k=0             ///////or   print(arr.index(arr))
for x in arr:
    if x==val:
        print(k)
    k+=1

****************NUMPY SYNTAX******************
from numpy import *
arr=array([10,20,30])
print(arr)

*****************CREATING ARRAYS IN NUMPY*************
array()
linspace()
logspace()
arange()
zeros()
ones()
-------------
from numpy import *
arr=array([10,20,30])
print(arr)
--------------
arr=linspace(1,20,10)-------[initial,final,no of parts]
----------------
arr=logspace(1,20,5)---------[initial,final,no of parts]
----------------
arr=arange(1,20,5)-----------[initial,final, steps]
------------------
arr=ones(5)
arr=zeros(5)
------------------
*************TRIGNOMETRIC VALUES************
from numpy import *
arr=array([1,20,5])
print(sin(arr))
-------------------
print(cos(arr))
print(log(arr))
print(sqrt(arr))
************COPYING AN ARRAY*******************
There are basically 3 types:
[1]....arr1=arr2-----------Aliasing
[2]....arr2=arr1.view()----This will change the address of the array
       while the data will be same in the array.
[3]....arr2=arr1.copy()----This will change the data as well as the address
       of the array.

from numpy import *
arr=array([1,20,5])
arr2=arr.copy()   ||  arr2=arr.view()
arr[1]=21
print(arr)
print(arr2)
print(id(arr))
print(id(arr2))

************TO FIND THE MAXIMUM VALUE FROM AN ARRAY WITHOUT USING THE INBUILT FUNCTIONS************
from numpy import *
from array import *
arr1=array('i',[])
x=int(input('enter the numbers'))
for e in range(x):
    i=int(input('enter the numbers:'))
    arr1.append(i)
i=0
for i in range(0,len(arr1)):
    for j in range(i+1,len(arr1)):
        if arr1[i]>arr1[j]:
            temp=arr1[j];
            arr1[j]=arr1[i];
            arr1[i]=temp
print('the largest number is: ' ,arr1[len(arr1)-1])

**************** 2D AND 3D ARRAYS*************
from numpy import *
arr1=array([
                [98,25,38,12,108,62],
                [20,54,65,56,47,23]
])
arr2=arr1.flatten()       arr1.dtype--to get the data type ex: int32,float64
arr3=arr2.reshape(2,2,3)  arr1.ndim--to get the dimentions of nXm matrix
print(arr3)
******************TO GET MATRICES****************
from numpy import *
arr1=array([
                [98,25,38,12,20,54,65,56]
])
arr2=arr1.reshape(2,4)
m=matrix(arr2)
print(m)
----or we can just give matrix as m=('1,2,2;25,32,25')
**->To get diagonal values we use a function diagonal(m)

****************FUNCTIONS******************
def update(x):
    print(id(x))
    x=20
    print(id(x))
    print(x)
x=[10,20,30]
print(id(x),'x')
update(x)
print('x', x)

*******************ARGUMENTS*******************
def add(a,b):   #Formal arguments
    print(a+b)
add(4,5)        #actual argument
******************Types of arguments**************

#position
def add(x,y):
    print(x+y)
add(5,4)

#keyword
def person(name,age):
    print(name)
    print(age)
person(name='koushik',age=21)

#Default
def person(name,age=18):
    print(name)
    print(age)
person('koushik')

#variable length
def add(a,*b):
    c=a
    for i in b:
        c=c+i
    print(c)
add(10,20,54,69,62)

****************KWARDS***************
def person(name,**data):
    print(name)
    for i,j in data.items():
        print(i,j)
person('koushik',age=21,city='banglore',mobile=7675826176)

************PASSING LIST TO A FUNCTION***********
def count(lst):
    even=0
    odd=0
    for x in lst:
        if x%2==0:
            even+=1
        else:
            odd+=1
    return even,odd
lst=[10,32,75,48,55,32,65]
even,odd=count(lst)
print('Even: {},odd:{}'.format(even,odd))

------------------
from array import *
def count(arr):
    even=0
    odd=0
    for x in arr:
        if x%2==0:
            even+=1
        else:
            odd+=1
    return even,odd
lst=int(input('enter the numbers:'))
arr=array('i',[])
for x in range(lst):
    d=int(input('enter the next value:'))
    arr.append(d)
even,odd=count(arr)
print('Even: {},odd:{}'.format(even,odd))

**************FIBONOCCI SERIES************

def fib(n):
    a=0
    b=1
    print(a)
    print(b)
    for x in range(2,n):
        c=a+b
        a=b
        b=c
        print(c)
x= int(input('enter the number:'))
fib(x)
*************FACTORIAL*******************

def fact(n):
    f=1
    for x in range(1,n+1):
        f=f*x
    return f
x=5
result=fact(x)
print(result)

****************RECURSION****************
import sys
sys.setrecursionlimit(2000)
print(sys.getrecursionlimit())
i=0
def rec():
    global i
    i+=1
    print('hello',i)
    rec()
rec()

***************FACTORIAL USING RECURSION*********

def fact(n):
    if n==0:
        return 1
    return n*(fact(n-1))
result=fact(5)
print(result)
***************ANONYMOUS FUNCTION LAMBDA***********
f= lambda a:a*a
result=f(5)
print(result)
***********FILTER MAP REDUCE*********************
WITHOUT LAMBDA
def is_even(n):
    return n%2==0
nums=[10,5,3,45,26]
evens=list(filter(is_even,nums))
print(evens)
-----------WITH LAMBDA

nums=[10,5,3,45,26]
evens=list(filter(lambda n:n%2==0,nums))
print(evens)
-----------------------------
from functools import reduce
nums=[10,24,5,3,45,26]
evens=list(filter(lambda n:n%2==0,nums))
doubles=list(map(lambda n:n*2,evens))
print(doubles)
sum=reduce(lambda a,b:a+b,doubles)
print(sum)

************DECORATORS*************
If we want to divide two numbers where we need to keep numerator as 
highest number then we can do it in two ways
1---> We can edit in the function defined (or)
2--->We can use DECORATORS 

def div(a,b):
    if a<b:
        a,b=b,a
    print(a/b)
div(2,4)
-----------
def div(a,b):
    print(a/b)

def smart_div(func):
    def inner(a,b):
        if a<b:
            a,b=b,a
        return func(a,b)
    return inner
div1=smart_div(div)
div1(2,4)

*********************MODULES********************
Here we are creating a module called 'CALC' and we are importing to 
a code 
----------------
def add(a,b):
    return a+b
def sub(a,b):
    return a-b
def multi(a,b):
    return a*b
def div(a,b):
    return a/b
-----------------
from calc import *
a=10
b=20
print(add(a,b))
print(multi(a,b))
print(div(a,b))
print(sub(a,b))

****************__name__=="__main__"*******************

---->if we print "print(__name__) the output will be __main__
---->but if we import a module which contains __name__ then the output will 
     show the module name inplace of __main__

my codes are "mycode" and "calc"
mycode:
  	print('hello')
	print('welcome user')
calc:
	print('Lets start calculation')

Here if i run calc then the output will be: hello
					    welcome user	
					    lets start calculating
but we dont want to print the whole statement as we want to show only if the module mycode is first
so in order to know if the modules is first or not we can pass this statement:** __name__=="__main__" ** 
-----------------------mycode-----------------
def main():
    print('hello')
    print('welcome user')
if __name__=="__main__":
    main() 
----------------------calc------------------
import mycode
print('its time to calculate')

****************************** CLASS ********************************
 class computer:
    def config(self):
        print('i3, 16gb, 1TB')

com1=computer
com2=computer

computer.config(com1)
computer.config(com2)

com1.config()
com2.config()

**************CONSTRUCTER SELF AND COMPARING OBJECTS********************
class person:
    def __init__(self):
        self.name='koushik'
        self.age=21
    def compare(self,c2):
        if c1.age==c2.age:
            return True
        else:
            return False

c1=person()
c1.age=30
c2=person()
if c1.compare(c2):
    print('they are same')
else:
    print('they are different')

print(c1.name)
print(c2.name)

***************INSTANCE VARIABLES AND CLASS VARIABLES*******************

class car:
    wheels=4 -----------------CLASS VARIABLE
    def __init__(self):
        self.com='AUDI'  ----|_ INSTANCE VARIABLES
        self.mil=8  ---------|
c1=car()
c1.mil=10
c2=car()
car.wheels=6
print(c1.com,c1.mil,c1.wheels)
print(c2.com,c2.mil,c2.wheels)

**********************TYPES OF METHODS*******************
class student:
    school='youtube'
    def __init__(self,m1,m2,m3):
        self.m1=m1
        self.m2=m2
        self.m3=m3
    def avg(self):---------------------------Instance Method[uses self]
        return (self.m1+self.m2+self.m3)/3
    @classmethod
    def getschool(cls):----------------------Class Method[uses cls]
        return cls.school
    @staticmethod
    def info():------------------------------Static method
        print('This is student class...')
c1=student(32,52,75)
c2=student(69,2,75)
print(c1.avg())
print(c2.avg())
print(student.getschool())
student.info()

***************************CLASS IN CLASS****************************

class student:
    def __init__(self,name,roll_no):
        self.name=name
        self.roll=roll_no
        self.lap=self.laptop()

    def show(self):
        print(self.name,self.roll)
        self.lap.show()


    class laptop:
        def __init__(self):
            self.brand='HP'
            self.ram=8
            self.cpu='i5'
        def show(self):
            print(self.brand,self.ram,self.cpu)

x1=student('koushik',191)
x2=student('Reddy','007')
x1.show()

*******************CONSTRUCTION IN INHERITENCE AND SUPER,MRO**********************
class A:
    def __init__(self):
        print('In A in it')
    def feature1(self):
        print('Feature 1A is working')

    def feature2(self):
        print('Feature 2 is working')

class B:
    def __init__(self):
        print('In B init')
    def feature1(self):
        print('Feature 1B is working')

    def feature4(self):
        print('Feature 4 is working')
class C(A,B):
    def __init__(self):
        super().__init__()
        print('In C init')
a1=C()
a1.feature1()

*******************************POLIMORPHISM********************************
DUCK TYPING
OPERATOR OVERLOADING
METHOD OVERLOADING
METHOD OVERRIDING
---------------------
DUCK TYPING
class PyCharm:
    def execute(self):
        print('comiling......')
        print('Running.......')

class new:
    def execute(self):
        print('taking ip...')
        print('evaluating...')
        print('comiling...')
        print('Running...')

ide=new()

class laptop:
    def code(self,ide):
        ide.execute()
lap1=laptop()
lap1.code(ide)
-----------------------------------
OPERATOR OVERLOADING---------------------it means that the operator will be same but the operands will change
                 Here __add__ operator will add two numbers but here we are adding two objects(operands)
class student:
    def __init__(self,m1,m2):
        self.m1=m1
        self.m2=m2

    def __add__(self, other):
        m1=self.m1+other.m1
        m2=self.m2+other.m2
        s3=student(m1,m2)
        return s3

s1=student(58,25)
s2=student(26,46)
s3=s1+s2
print(s3.m2)
-----------------------------------
class student:
    def __init__(self,m1,m2):
        self.m1=m1
        self.m2=m2

    def __add__(self, other):
        m1=self.m1+other.m1
        m2=self.m2+other.m2
        s3=student(m1,m2)
        return s3
    def __gt__(self, other):
        r1=self.m1+self.m2
        r2=other.m1+other.m2
        if r1>r2:
            return True
        else:
            return False
    def __str__(self):
        return '{} {}'.format( self.m1,self.m2)

s1=student(58,25)
s2=student(86,46)
s3=s1+s2
if s1>s2:
    print('S1 wins')
else:
    print('s2 wins')
print(s1)
print(s2)
-----------------------------------------------
METHOD OVERLOADING...
class student:
    def __init__(self,m1,m2):
        self.m1=m1
        self.m2=m2

    def sum(self,a=None,b=None,c=None):
        s=0
        if a!=None and b!=None and c!=None:
            s=a+b+c
        elif a!=None and b!=None:
            s=a+b
        else:
            s=a
        return s

s=student(20,30)
print(s.sum(10,20,30))
---------------------------------------
METHOD OVERRIDING
class A:
    def show(self):
        print('In A class')
        quit()

class B(A):
    def show(self):
        print('In B class')
        quit()
a=B()
print(a.show())

****************************************ABSTRACT CLASS AND ABSTRACT METHOD*********************
#By default abstract classes or methods will not be there in python. So we need to create a abstract class by importing 'abc'.

from abc import ABC,abstractmethod
class computer(ABC):
    @abstractmethod
    def process(self):
        pass

class laptop(computer):
    def process(self):
        print('Its running...')

class whiteboard(computer):
    def write(self):
        print("its writing...")

class programmer:
    def work(self,com):
        print('Solving Bugs...')
        com.process()


com1=laptop()
com2=whiteboard
prog=programmer()

prog.work(com2)

********************************ITERATION***************
nums=[10,52,41,32]
it=iter(nums)
print(it.__next__())
print(next(it))
print(next(it))
print(next(it))
----------------------------------
class top:
    def __init__(self):
        self.num=1

    def __iter__(self):
        return self

    def __next__(self):
        if self.num<=10:
            val=self.num
            self.num+=1
            return val
        else:
            raise StopIteration

values=top()
for x in values:
    print(x)
****************************GENERATORS***************
def topten():                    //return will terminate the function where as yield does not
    n=1
    while n<=10:
        sq=n*n
        yield sq
        n+=1


values=topten()
for x in values:
    print(x)
*********************************EXCEPTION HANDLING*******************
a=5
b=0
try:
    print(a/b)
except Exception as e:
    print('we cant divide a number by zero',e)
-------------------------------------------------------------
a=5
b=2

try:
    print('Resource open')
    print(a/b)
    k = int(input('Enter a number'))
    print(k)


except ZeroDivisionError as e:
    print('we cant divide a number by zero',e)
except ValueError as v:
    print('Invalid Input')
except Exception as e:
    print('Somthing went wrong')

finally:
    print('Resource closed')
**********************************MULTI THREADING****************
from threading import *
from time import *
class hello(Thread):
    def run(self):
        for i in range(5):
            print('Hello')
            sleep(1)
class hi(Thread):
    def run(self):
        for i in range(5):
            print('Hi')
            sleep(1)
ob1=hello()
ob2=hi()
ob1.start()
sleep(0.2)
ob2.start()
ob1.join()
ob2.join()
print('Bye')
*********************************FILE HANDLING******************
f=open('demo','r')
print(f.readline(),end="")
print(f.readline(),end="")
print(f.readline())
----------------------------------
r=read
w=write          write will just write the date and it will not be stored permanantly
a=append
f=open('demo','r')
f2=open('file','w')
f2=open('file','a')
f2.write('Hi')
-------------------for copying data from to other-------------------
f=open('demo','r')
f2=open('file','w')
for data in f:
    f2.write(data)
*********************************LINEAR SEARCH**********************
pos=-1
def search(a,n):
    i=0
    while i<len(a):
        if a[i]==n:
            globals()['pos']=i
            return True
        i+=1
    return False

a=[54,2,41,3,25]
n=2
if search(a,n):
    print('Found at ',pos)
else:
    print('not found')
************************************BINARY SEARCH********************
pos=-1
def search(list,n):
    l=0
    u=len(list)-1
    while l<=u:
        mid=(l+u)//2
        if list[mid]==n:
            globals()['pos']=mid
            return True
        else:
            if list[mid]<n:
                l=mid
            else:
                u=mid

list=[5,26,35,75,85,96,120,135]
n=int(input('Enter the number to search'))

if search(list,n):
    print('Found at',pos+1)
else:
    print('Not Found')
*******************************BUBBLE SORT**********************
def sort(nums):
    for i in range(len(nums)-1,0,-1):
        for j in range(i):
            if nums[j]>nums[j+1]:
                temp=nums[j];
                nums[j]=nums[j+1];
                nums[j+1]=temp

nums=[5,3,6,25,18]
sort(nums)
print(nums)
*****************************SELECTION SORT**************************
def sort(nums):
    for i in range(5):
        minpos=i
        for j in range(i,6):
            if nums[j]<nums[minpos]:
                minpos=j
        temp=nums[i]
        nums[i]=nums[minpos]
        nums[minpos]=temp
    print(nums)



nums=[5,3,6,25,18,21]
sort(nums)
print(nums)
***************************TKINTER***********************
from tkinter import *
box=Tk()
txt1=Label(box,text="GUI created succesfully", font=("courier",20))
txt1.grid(column=1,row=0)
bt1=Button(box,text='Button 1',font=("courier",15),bg='Blue',fg='white')
bt1.grid(column=1,row=2)
bt2=Button(box,text='Button 2',font=("courier",15),bg='Blue',fg='white')
bt2.grid(column=1,row=4)
box.geometry('450x200')
box.mainloop()
------------------------------------------------------------
from tkinter import *
box=Tk()
txt1=Label(box,text="Login", font=("arial bold",35),fg='blue')
txt1.grid(column=1,row=0)
bt1=Label(box,text='Username',font=("courier",15))
bt1.grid(column=0,row=1)
bt2=Label(box,text='password',font=("courier",15))
bt2.grid(column=0,row=2)
bt3=Button(box,text='login',font=('courier',15),bg='black',fg='green')
bt3.grid(column=1,row=3)
ent=Entry(box).grid(column=1,row=1)
ent2=Entry(box).grid(column=1,row=2)
box.geometry('350x200')
box.mainloop()





